package com.spendwell.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONArray;

import com.android.volley.AuthFailureError;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.Volley;
import com.example.budgetwell.R;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.spendwell.activity.NotificationListActivity;
import com.spendwell.entity.NotificaitonItem;

import android.app.Notification;
import android.app.Notification.Builder;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Binder;
import android.os.IBinder;
import android.provider.MediaStore.Audio;
import android.widget.Toast;

public class NotificationServeice extends Service {
	private Context mContext;
	private RequestQueue mQueue;
	private SharedService ss;
	private List<NotificaitonItem> list;
	private NotificationManager notificationManager;
	private static final int NOTIFICATION_ID = 123;
	private Builder builder = null;
	private Notification notify = null;
	private String url = "http://spendwell.herokuapp.com/api/notifications/";
	private MyBinder binder = new MyBinder();
	public Timer loadTimer;

	// Timer task that run the load event
	TimerTask loadTask = new TimerTask() {

		@Override
		public void run() {
			loadNotications();
		}
	};

	@Override
	public void onCreate() {
		super.onCreate();
		mContext = getApplicationContext();
		mQueue = Volley.newRequestQueue(mContext);
		ss = new SharedService(mContext);
		list = new ArrayList<NotificaitonItem>();
		notificationManager = (NotificationManager) mContext
				.getSystemService(Context.NOTIFICATION_SERVICE);
	}

	@Override
	public IBinder onBind(Intent intent) {
		return binder;
	}

	public class MyBinder extends Binder {
		public void startLoading() {
			if (loadTimer == null) {
				loadTimer = new Timer();
				loadTimer.schedule(loadTask, 1000, 10 * 1000);
				// set the loadTimer to repeat the task every 10 second
			}
		}

	}

	/**
	 * Send request using the login token and select the repsonse
	 * 
	 * @author Yifei Gao
	 */
	public void loadNotications() {

		JsonArrayRequest request = new JsonArrayRequest(url,
				new Response.Listener<JSONArray>() {

					@Override
					public void onResponse(JSONArray response) {
						String json = response.toString();
						Gson gson = new Gson();
						list = gson.fromJson(json,
								new TypeToken<List<NotificaitonItem>>() {
								}.getType());
						selectItem(list);// select the notification items
					}
				}, new Response.ErrorListener() {

					@Override
					public void onErrorResponse(VolleyError error) {
						Toast.makeText(mContext, "Notification Service Error",
								Toast.LENGTH_SHORT).show();
					}
				}) {
			@Override
			public Map<String, String> getHeaders() throws AuthFailureError {
				Map<String, String> header = new HashMap<String, String>();
				header.put("Authorization", "Token " + ss.getRequestToken());
				return header;
			}
		};
		mQueue.add(request);
	}

	/**
	 * Select Notification item that is after the lastupdate time stamp
	 * 
	 * @author Yifei Gao
	 * @param list
	 *            List of Notification Items obtain from the response
	 */
	public void selectItem(List<NotificaitonItem> list) {
		long lastUpdatetime = ss.getLastUpdateTime();

		List<NotificaitonItem> notes = ss.getAllNotifications();
		List<NotificaitonItem> update = new ArrayList<NotificaitonItem>();

		if (lastUpdatetime == 0) {
			// if first login, set the update to be all items
			update = list;
			notes = list;
		} else {

			for (NotificaitonItem item : list) {

				if (item.getDate().getTime() > lastUpdatetime) {
					notes.add(item);
					update.add(item);
				}
			}
		}

		// show notification when the update is larger than 1
		if (update.size() > 0) {
			ss.setLastUpdateTime(System.currentTimeMillis() + 1000);
			sendNotification(update);
		}

		ss.setNotificationList(notes);
	}

	/**
	 * Consturt Notification using the list of update items
	 * 
	 * @author Yifei Gao
	 * @param update
	 *            List of new Notification items not read
	 */
	public void sendNotification(List<NotificaitonItem> update) {

		Intent it = new Intent(mContext, NotificationListActivity.class);
		PendingIntent pit = PendingIntent.getActivity(mContext, 0, it,
				Intent.FLAG_ACTIVITY_NEW_TASK);
		builder = new Notification.Builder(mContext);

		// set content of the notifications
		builder.setAutoCancel(true);
		builder.setTicker("You have new Notification");
		builder.setSmallIcon(R.drawable.ic_launcher);
		builder.setContentTitle("New Notificaition");
		builder.setContentText("You have " + update.size()
				+ " notfications not read!");
		builder.setContentIntent(pit);

		if (ss.getVibrate()) {
			// if the vibrate flag is on, set the vibrate effect
			builder.setVibrate(new long[] { 500, 200, 500, 200 });
		}

		if (ss.getSound()) {
			// if the sound flag is on, set the sound effect
			builder.setSound(Uri.withAppendedPath(
					Audio.Media.INTERNAL_CONTENT_URI, "6"));
		}

		notify = builder.build();
		notificationManager.notify(NOTIFICATION_ID, notify);

	}

}
