package com.spendwell.utils;

import com.anupcowkur.wheelmenu.WheelMenu;
import com.anupcowkur.wheelmenu.WheelMenu.WheelChangeListener;
import com.example.budgetwell.R;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.Scroller;
import android.widget.TextView;

/**
 * Scroller
 * 
 * @author Ra blog : http://blog.csdn.net/vipzjyno1/
 */
public class LoginView extends RelativeLayout {
	private Scroller mScroller;
	private int mScreenHeigh = 0;
	private int mScreenWidth = 0;
	private int downY = 0;
	private int moveY = 0;
	private int scrollY = 0;
	private int upY = 0;
	private Boolean isMoving = false;
	private int viewHeight = 0;
	public boolean isShow = false;
	public boolean mEnabled = true;
	public boolean mOutsideTouchable = true;
	private int mDuration = 800;
	private final static String TAG = "LoginView";

	public WheelMenu wheelMenu;
	public TextView txt_1, txt_2, txt_3, txt_4, mFocus;
	private long lastUpdateTime;
	private static final int TIME_INTEVAL = 1000;
	private int foucs = 0;
	public ImageButton btn_close, btn_send;

	public LoginView(Context context) {
		super(context);
		init(context);
	}

	public LoginView(Context context, AttributeSet attrs) {
		super(context, attrs);
		init(context);
	}

	public LoginView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init(context);
	}

	private void init(Context context) {
		setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
		setFocusable(true);
		mScroller = new Scroller(context);
		WindowManager wm = (WindowManager) (context
				.getSystemService(Context.WINDOW_SERVICE));
		DisplayMetrics dm = new DisplayMetrics();
		wm.getDefaultDisplay().getMetrics(dm);
		mScreenHeigh = dm.heightPixels;
		mScreenWidth = dm.widthPixels;
		this.setBackgroundColor(Color.argb(0, 0, 0, 0));
		final View view = LayoutInflater.from(context).inflate(
				R.layout.safe_dial_layout, null);
		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT,
				LayoutParams.WRAP_CONTENT);
		wheelMenu = (WheelMenu) view.findViewById(R.id.wheelMenu);
		wheelMenu.setDivCount(10);
		wheelMenu.setWheelImage(R.drawable.safe_dial_img);

		txt_1 = (TextView) view.findViewById(R.id.txt_1);
		txt_2 = (TextView) view.findViewById(R.id.txt_2);
		txt_3 = (TextView) view.findViewById(R.id.txt_3);
		txt_4 = (TextView) view.findViewById(R.id.txt_4);

		btn_send = (ImageButton) view.findViewById(R.id.send_btn);

		wheelMenu.setWheelChangeListener(new WheelChangeListener() {

			@Override
			public void onSelectionChange(int position) {
				long currentTime = System.currentTimeMillis();
				long timeInterval = currentTime - lastUpdateTime;
				if (timeInterval > TIME_INTEVAL) {
					changeFoucus();
				}
				mFocus.setText("" + position);
				lastUpdateTime = currentTime;
			}
		});
		initListener();

		addView(view, params);
		this.setBackgroundColor(Color.argb(0, 0, 0, 0));
		view.post(new Runnable() {

			@Override
			public void run() {
				viewHeight = view.getHeight();
			}
		});
		LoginView.this.scrollTo(0, mScreenHeigh);
		ImageButton btn_close = (ImageButton) view.findViewById(R.id.close_btn);
		btn_close.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				dismiss();
			}
		});
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		if (!mEnabled) {
			return false;
		}
		return super.onInterceptTouchEvent(ev);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			downY = (int) event.getY();
			Log.d(TAG, "downY = " + downY);
			if (isShow) {
				return true;
			}
			break;
		case MotionEvent.ACTION_MOVE:
			moveY = (int) event.getY();
			scrollY = moveY - downY;
			if (scrollY > 0) {
				if (isShow) {
					scrollTo(0, -Math.abs(scrollY));
				}
			} else {
				if (mScreenHeigh - this.getTop() <= viewHeight && !isShow) {
					scrollTo(0, Math.abs(viewHeight - scrollY));
				}
			}
			break;
		case MotionEvent.ACTION_UP:
			upY = (int) event.getY();
			if (isShow) {
				if (this.getScrollY() <= -(viewHeight / 2)) {
					startMoveAnim(this.getScrollY(),
							-(viewHeight - this.getScrollY()), mDuration);
					isShow = false;
					Log.d("isShow", "false");
				} else {
					startMoveAnim(this.getScrollY(), -this.getScrollY(),
							mDuration);
					isShow = true;
					Log.d("isShow", "true");
				}
			}
			Log.d("this.getScrollY()", "" + this.getScrollY());
			changed();
			break;
		case MotionEvent.ACTION_OUTSIDE:
			Log.d(TAG, "ACTION_OUTSIDE");
			break;
		default:
			break;
		}
		return super.onTouchEvent(event);
	}

	public void startMoveAnim(int startY, int dy, int duration) {
		isMoving = true;
		mScroller.startScroll(0, startY, 0, dy, duration);
		invalidate();
	}

	@Override
	public void computeScroll() {
		if (mScroller.computeScrollOffset()) {
			scrollTo(mScroller.getCurrX(), mScroller.getCurrY());
			postInvalidate();
			isMoving = true;
		} else {
			isMoving = false;
		}
		super.computeScroll();
	}

	public void show() {
		if (!isShow && !isMoving) {
			LoginView.this.startMoveAnim(-viewHeight, viewHeight, mDuration);
			isShow = true;
			Log.d("isShow", "true");
			changed();
		}
	}

	public void dismiss() {
		if (isShow && !isMoving) {
			LoginView.this.startMoveAnim(0, -viewHeight, mDuration);
			isShow = false;
			Log.d("isShow", "false");
			changed();
		}
	}

	public boolean isShow() {
		return isShow;
	}

	public boolean isSlidingEnabled() {
		return mEnabled;
	}

	public void setSlidingEnabled(boolean enabled) {
		mEnabled = enabled;
	}

	public void setOnStatusListener(onStatusListener listener) {
		this.statusListener = listener;
	}

	public void setOutsideTouchable(boolean touchable) {
		mOutsideTouchable = touchable;
	}

	public void changed() {
		if (statusListener != null) {
			if (isShow) {
				statusListener.onShow();
			} else {
				statusListener.onDismiss();
			}
		}
	}

	public void changeFoucus() {
		if (foucs == 0) {
			mFocus = txt_1;
		} else if (foucs == 1) {
			mFocus = txt_2;
		} else if (foucs == 2) {
			mFocus = txt_3;
		} else if (foucs == 3) {
			mFocus = txt_4;
		}
		changeBackGround();
		foucs++;
	}

	public void changeBackGround() {
		int defaultColor = getResources().getColor(R.color.background_grey);
		txt_1.setBackgroundColor(defaultColor);
		txt_2.setBackgroundColor(defaultColor);
		txt_3.setBackgroundColor(defaultColor);
		txt_4.setBackgroundColor(defaultColor);

		mFocus.setBackgroundColor(getResources().getColor(
				R.color.bar_green_dark));

	}

	public void initListener() {
		txt_1.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mFocus = txt_1;
				foucs = 0;
				changeBackGround();
			}
		});
		txt_2.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mFocus = txt_2;
				foucs = 1;
				changeBackGround();
			}
		});
		txt_3.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mFocus = txt_3;
				foucs = 2;
				changeBackGround();
			}
		});
		txt_4.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mFocus = txt_4;
				foucs = 3;
				changeBackGround();
			}
		});
	}

	public onStatusListener statusListener;

	public interface onStatusListener {
		public void onShow();

		public void onDismiss();
	}

	@Override
	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		super.onLayout(changed, l, t, r, b);
	}
}
